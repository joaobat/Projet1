taxaacerto <- (matriz_conf[1] + matriz_conf[4]) / sum(matriz_conf)
print(taxaacerto)
# Calculando a taxa de erro do mdelo
taxaerro <- (matriz_conf[2] + matriz_conf[3]) / sum(matriz_conf)
print(taxaerro)
head(iris)
summary(iris)
cluster <- kmeans(iris[1:4],centers = 3)
cluster
# Gera uma tabela para comparar o quanto o algoritmo acertou
tabela <- table(iris$Species, cluster$cluster)
tabela
# Analisando de forma grafica
plot(iris[,1:4], cluster$cluster)
# Analisando de forma grafica
plot(iris[,1:4], col=cluster$cluster)
# INSTALAÇÃO DAS BIBLIOTECAS PARA O PROJETO
#install.packages("e1071", dependencies = T)
library(e1071)
# Usando o dataset Iris -> 150 instancias e 3 especies - setosa - versicolo - virginica
cluster <- cmeans(iris[, 1:4], centers = 3)
cluster
# Matriz de Confusao
matriz <- table(iris$Species, cluster$cluster)
matriz
plot(iris[,1:4], col=cluster$cluster)
# Instalação das Bibliotecas
install.packages("cluster", dependencies = T)
library(cluster)
# Usando o dataset Iris -> Dados Historicos das flores de iris - 150 instancias
cluster <- pam(iris[,1:4],k=3)
cluster
# Visualizando graficamente o modelo
plot(cluster)
# Avaliando a performance atraves da matriz de confusao
matriz <- table(iris$Species, cluster$clustering)
matriz
#==========================================================================================
#       REGRAS DE ASSOCIAÇÃO - MINERANDO CESTA DE COMPRAS
#       ALGORITMO A-PRIORI
#=========================================================================================
# Instalação das Bibliotecas do projetos
install.packages("arules",dependencies = T)
library(arules)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
library(arules)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
#==========================================================================================
#       REGRAS DE ASSOCIAÇÃO - MINERANDO CESTA DE COMPRAS
#       ALGORITMO A-PRIORI
#=========================================================================================
# Instalação das Bibliotecas do projetos
#install.packages("arules",dependencies = T)
library(arules)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
transacoes
View(transacoes)
inspect(transacoes)
# Criando uma imagem das tranaçoes
image(transacoes)
# Minerando as regras -> com o apriori
regras <- apriori(transacoes, parameter = list(supp=0.5,conf=0.5))
regras
inspect(regras)
# Visualizando de forma mais elegante as regras com o pacote arulesviz
#install.packages("arulesViz",dependencies = T)
library(arulesViz)
plot(regras)
# Metodo mais sofisticado de visulizar
plot(regras, method = "graph", control = list(type="items"))
#=========================================================================================
#         Itens frequantes - Mineração de regras de associação
#   Com o algoritmo Eclat
#=========================================================================================
library(arules)
library(arulesViz)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
# Visualizando as transações
image(transacoes)
regras <- eclat(transacoes, parameter = list(supp=0.1, maxlen=15))
inspect(regras)
library(arules)
library(arulesViz)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
# Visualizando as transações
image(transacoes)
regras <- eclat(transacoes, parameter = list(supp=0.1, maxlen=15))
regras
inspect(regras)
plot(regras, method = "graph", control = list(type="items"))
library(arules)
library(arulesViz)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
# Visualizando as transações
image(transacoes)
regras <- eclat(transacoes, parameter = list(supp=0.1, maxlen=15))
inspect(regras)
plot(regras, method = "graph", control = list(type="items"))
library(arules)
library(arulesViz)
# carregando a base de dados -> transações
transacoes <- read.transactions(file.choose(), format = "basket", sep = ",")
# Visualizando as transações
image(transacoes)
regras <- eclat(transacoes, parameter = list(supp=0.1, maxlen=15))
inspect(regras)
plot(regras, method = "graph", control = list(type="items"))
# Carregando a base de dados - digits
digitos <- read.csv(gzfile(file.choose()), header = F)
dim(digitos)
head(digitos)
# Dividindo a tela do R em 4 partes
split.screen(figs = c(2,2))
# Transformando uma linha do arquivo em uma matriz
dig <- t(matrix(unlist(digitos[20, -785]), nrow = 28, byrow = F))
dig <- t(apply(dig, 2, rev))
dig
screen(1)
image(dig, col=grey.colors(255))
# Verificando a veracidade da imagem
digitos[20, 785]
screen(2)
dig <- t(matrix(unlist(digitos[2, -785]), nrow = 28, byrow = F))
dig <- t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
screen(3)
dig <- t(matrix(unlist(digitos[4, -785]), nrow = 28, byrow = F))
dig <- t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
screen(4)
dig <- t(matrix(unlist(digitos[5, -785]), nrow = 28, byrow = F))
dig <- t(apply(dig, 2, rev))
image(dig, col=grey.colors(255))
# fecha a divisao da tela para retornar ao estado normal
close.screen(all=T)
# Imprimindo um digito usando toda tela de impressão
image(dig, col=grey.colors(255))
#========================================================================================================
#     Deep Learning -> usando o pacote H2O
#========================================================================================================
install.packages("h2o", dependencies = T)
library(h2o)
# É preciso inicializar o pacote h2O
h2o.init()
# Importando os dados para análise
treino <- h2o.importFile(file.choose())
teste <- h2o.importFile(file.choose())
dim(treino)
head(treino)
# transformando a classe em um tipo fator
treino[,785] <- as.factor(treino[,785])
teste[,785] <- as.factor(teste[,785])
head(treino)
modelo_deep <- h2o.deeplearning( x = colnames(treino[,1:784]), y = "C785", training_frame = treino, validation_frame = teste, distribution = "AUTO", activation = "RectifierWithDropout", hidden = c(64,64,64), sparse = TRUE, epochs = 20)
# Plotando o modelo de deep learning
plot(modelo_deep)
# Verificando a performance do modelo
h2o.performance(modelo_deep)
treino[20,785]
# Prevendo o digito
pred <- h2o.predict(modelo_deep, newdata=treino[20,1:784])
pred$predict
install.packages("igraph", dependencies = T)
library(igraph)
grafo1 = graph(edges = c(1,2,2,3,3,4,4,1))
plot(grafo1)
grafo2 = graph(edges = c(1,2,2,3,3,4,4,1,1,4,4,3,3,2,2,1))
plot(grafo2)
#grafo com autorelacionamento
grafo3 = graph(edges = c(1,2,2,3,3,4,4,1, 1,1))
plot(graf3)
grafo3 = graph(edges = c(1,2,2,3,3,4,4,1, 1,1))
plot(grafo3)
#Grafos literais
grafo_literal = graph_from_literal(1-+2,2-+3,3++4,4-+1)
plot(grafo_literal)
#Grafo não direcionado
grafo_naodir = graph_from_literal(1--2,2--3,3--4,4--1)
plot(grafo_naodir)
#Criando um grafo isolado
grafo_isolado = graph_from_literal(1--2,2--3,3--4,4--1,5)
plot(grafo_isolado)
grafo1
#Forma de criar um grafo nao direcionado
grafo01 = graph(edges = c(1,2,3,3,4,4,1), directed = F)
#Forma de criar um grafo nao direcionado
grafo01 = graph(edges = c(1,2,3,3,4,4,1), directed = FALSE)
#Forma de criar um grafo nao direcionado
grafo01 = graph(edges = c(1,2,3,3,3,4,4,1), directed = FALSE)
plot(grafo01)
grafo01
#Gerando grafo nao direcionado
grafo02 = graph(edges = c(1,2,2,3,3,4,4,1), directed = FALSE, n=10)
plot(grafo02)
#Criando grafos nomeados
grafo03 = graph(edges = c("A","B","B","C","C","D","D","E","E","A","A","C","C","B"), isolates = c("F","G"))
plot(grafo03)
grafo03[]
#Acessando os vertices e arestas
V(grafo03)$name
#definindo atributos para o grafo
grafo04 = graph(edges = c("Fernando","Pedro","Jose","Antonio","Fernando","Jose","Fernando","Antonio"))
plot(grafo04)
V(grafo04)$peso = c(40,30,30,25)
#Lendo os atributos de um grafo
vertex_attr(grafo04)
#definindo atributos para as edges
E(grafo04)$TipoAmizade = c("Amigo","Inimigo","Inimigo","Amigo")
#Lendo os tipos de arestas
edge_attr(grafo04)
#Lendo um unico atributo
vertex_attr(grafo04)$peso
#definindo peso para as arestas
E(grafo04)$weight = c(1,2,1,3)
grafo04
#definindo um tipo para os vertices
V(grafo04)$type = "Humanos"
grafo04
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso)
#Impressao dos pesos das arestas
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso, edge.width=edge_attr(grafo04)$weigth)
#Definindo cores para os vertices
vertex_attr(grafo04)$cor = c("Blue","Red","Yellow","Green")
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso, edge.width=edge_attr(grafo04)$weigth, vertex.color=vertex_attr(grafo04)$cor)
#Fazendo arestas curvadas
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso, edge.width=edge_attr(grafo04)$weigth, vertex.color=vertex_attr(grafo04)$cor, edge.curved=0.4)
#Inserindo uma moldura e um titulo no grafo
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso, edge.width=edge_attr(grafo04)$weigth, vertex.color=vertex_attr(grafo04)$cor, edge.curved=0.4,frame=T,main="Pessoas")
#Transformando os vertices em quadrados
plot(grafo04, vertex.size=vertex_attr(grafo04)$peso, edge.width=edge_attr(grafo04)$weigth, vertex.color=vertex_attr(grafo04)$cor, edge.curved=0.4,frame=T,main="Pessoas",vertex.shape="square")
#Imprimindo grafos interativos
tkplot(grafo04)
grafo_metrica = read_graph(file.choose(), format = c("graphml"))
grafo_metrica
plot(grafo_metrica)
#Visualizando algumas propriedades
degree(grafo_metrica, mode = "all")
#graus de entrada
degree(grafo_metrica, mode = "in")
#somente graus de saida
degree(grafo_metrica, mode = "out")
#Definindo o grau de entrada
grau = degree(grafo_metrica, mode = "in")
plot(grafo_metrica, vertex.size=grau)
#Diamentro do grafico
diameter(grafo_metrica, directed = T)
#Diamentro do grafico não direcionado
diameter(grafo_metrica, directed = F)
library(igraph)
grafo_metrica = read_graph(file.choose(), format = c("graphml"))
grafo_metrica
plot(grafo_metrica)
degree(grafo_metrica, mode = "all")
degree(grafo_metrica, mode = "in")
degree(grafo_metrica, mode = "out")
grau = degree(grafo_metrica, mode = "in")
plot(grafo_metrica, vertex.size=grau)
diameter(grafo_metrica, directed = T)
diameter(grafo_metrica, directed = F)
get_diameter(grafo_metrica, directed = T)
#Calculo da vizinhança
neighborhood(grafo_metrica, 0, mode = c("all"))
grafo01 = grafo_metrica
isomorphic(grafo_metrica,grafo01)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
E(dist)$weight = c(2,1,2,1,2,1,1,3,1)
plot(dist, edge.label = E(dist)$weight)
tkplot(dist, edge.label = E(dist)$weight, vertex.color="white")
distances(dist,1,8)
distances(dist,V(dist)$name=="A",V(dist)$name=="H")
caminho = shortest_paths(dist,V(dist)$name=="A",V(dist)$name=="H", output=c("both"))
caminho$vpath
#Impressao do caminho
for(i in 1:length(V(dist)))
{
V(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$vpath))
,"green","gray")
}
for(i in 1:length(E(dist)))
{
E(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$epath))
, "green","gray")
}
plot(dist, edge.label = E(dist)$weight)
caminho = shortest_paths(dist,V(dist)$name=="H",V(dist)$name=="A", output=c("both"))
library(igraph)
comun = cluster_edge_betweenness(grafo01)
comun
comun$membership
plot(grafo01, vertex.color = comun$membership)
comunidade = cluster_edge_betweenness(dist)
comunidade$membership
plot(dist, vertex.color = comunidade$membership, edge.color="gray")
plot(dist,comunidade)
plot(dist, vertex.color = comunidade$membership, edge.color="gray")
plot(dist,comunidade)
#definição de cliques
cli = cliques(as.undirected(grafo01), min=4)
length(cli)
cli
library(igraph)
install.packages("igraphdata", dependencies = T)
library(igraphdata)
data(Koenigsberg)
plot(Koenigsberg)
Koenigsberg
degree(Koenigsberg, mode = "all")
data(kite)
plot(kite)
data(UKfaculty)
UKfaculty
plot(UKfaculty)
comunnity=cluster_edge_betweenness(UKfaculty)
plot(comunnity,UKfaculty)
library(igraph)
grafo1 = graph(edges = c(1,2,2,3,3,4,4,1))
comun = cluster_edge_betweenness(grafo01)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
E(dist)$weight = c(2,1,2,1,2,1,1,3,1)
#Criando uma comunidade
comun = cluster_edge_betweenness(dist)
comun
comun$membership
plot(grafo01, vertex.color = comun$membership)
#Plotando a comunidade
plot(dist, vertex.color = comun$membership)
library(igraph)
library(igraphdata)
data(Koenigsberg)
plot(Koenigsberg)
data(kite)
plot(kite)
data(UKfaculty)
plot(UKfaculty)
comunnity=cluster_edge_betweenness(UKfaculty)
plot(comunnity,UKfaculty)
#==================================================================================================
#       Mineração de Textos
#       Corpus -> Conjunto de documentos
#==================================================================================================
#Instalação das bibliotecas
install.packages("tm", dependencies = T)
library(tm)
#Verificando as fontes disponiveis
getSources()
#Verificando os tipos de leitura
getReaders()
#Criando um coprus -> documento
corpus <- VCorpus(DirSource("C:/Users/cs/Documents/NoSql/CienciaDeDados/textos"), Encoding="UTF-8", readerControl = list(reader=readPlain, language="eng"))
#Criando um coprus -> documento
corpus <- VCorpus(DirSource("C:/Users/cs/Documents/NoSql/CienciaDeDados/textos", Encoding="UTF-8"), readerControl = list(reader=readPlain, language="eng"))
#Criando um coprus -> documento
corpus <- VCorpus(DirSource("C:/Users/cs/Documents/NoSql/CienciaDeDados/textos", encondig="UTF-8"), readerControl = list(reader=readPlain, language="eng"))
#Criando um coprus -> documento
corpus <- VCorpus(DirSource("C:/Users/cs/Documents/NoSql/CienciaDeDados/textos", encondig="UTF-8"), readerControl = list(reader=readPlain, language="eng"))
#Criando um coprus -> documento
corpus <- VCorpus(DirSource("C:/Users/cs/Documents/NoSql/CienciaDeDados/textos", encoding = "UTF-8"),readerControl = list(reader=readPlain,language = "eng"))
#Visualizando um Resumo
inspect(corpus)
#Lendo intervalos do documento
inspect(corpus[1:50])
#Lendo os metadados
meta(corpus[[1]])
#Lendo um corpus especifico
inspect(corpus[[10]])
#Lendo um corpus especifico
inspect(corpus[[2]])
#Transformando o texto por linhas
as.character(corpus[[2]])
#Captando apenas uma linha do corpus
as.character(corpus[[2]])[1]
#Tratamento de stpwords
stopwords("portuguese")
#Removendo as stopwords
corpus <- tm_map(corpus, removeWords, stopwords("english"))
#Removendo espaços em branco
corpus <- tm_map(corpus, stripWhitespace)
#Removendo pontuação
corpus <- tm_map(corpus, removePunctuation)
#Removendo Numeros
corpus <- tm_map(corpus, removeNumbers)
#Criando uma nuvem de palavras
# 1 - instalar o pacote wordcloud
install.packages("wordcloud", dependencies = T)
library(wordcloud)
nuvem <- wordcloud(corpus, max.words = 100, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
#Gerando uma matriz de termos mais frequentes - termDocumentMatrix
frequencia <- TermDocumentMatrix(corpus)
#Transformando em uma matriz a frequencia criada
matriz <- as.matrix(frequencia)
#Ordenando os dados
matriz <- sort(rowSums(matriz), decreasing = T)
#Gerando um data frame
matriz <- data.frame(word=names(matriz), frequencia=matriz)
matriz
#====================================================================================================
#   Visualização e Dashboard
#====================================================================================================
#histograma
a <- trees
hist(a$Height, main = "Arvores", ylab = "Frequencia", xlab = "Altura", col = "blue")
#Mudando a densidade
hist(a$Height, main = "Arvores", ylab = "Frequencia", xlab = "Altura", col = "blue", density = 20, breaks = 20)
#Gerando a densidade
densidade <- density(a$Height)
plot(densidade)
#Sobrepondo o histograma com a linha de densidade
hist(a$Height, main = NULL, xlab = NULL)
plot(densidade)
hist(a$Height, main = NULL, xlab = NULL)
par(new=TRUE)
plot(densidade)
#Grafico de dispersão
plot(a$Girth, a$Volume, main = "Arvores", ylab = "Circunferencia", xlab = "Volume", col="red")
#Mudando o formato dos pontos
plot(a$Girth, a$Volume, main = "Arvores", ylab = "Circunferencia", xlab = "Volume", col="blue", pch=20)
#Mudando o type
plot(a$Girth, a$Volume, main = "Arvores", ylab = "Circunferencia", xlab = "Volume", col="blue", pch=20, type = "l")
#Usando o jitter
plot(jitter(a$Girth), a$Volume, main = "Arvores", ylab = "Circunferencia", xlab = "Volume", col="red", pch=20)
co2
#Dispersão com Legenda
c <- co2
#Dispersão com Legenda
c <- CO2
plot(c$conc, c$uptake, pch=20, col=c$Treatment)
legend("bottomright", legend = c("nonchilled", "chilled"), cex = 1, fill = c("black", "red"))
#Divindindo a tela
plot(a)
split.screen(figs = c(2,2))
plot(a$Girth, a$Volume)
screen(2)
plot(a$Girth, a$Height)
screen(3)
plot(a$Height, a$Volume)
screen(4)
hist(a$Volume)
#Desabilitando a separação da tela
close.screen(all=TRUE)
#BoxPlot
boxplot(a$Volume, main="Arvore", xlab="Volume")
#Mudando a cor e a disposição
boxplot(a$Volume, main="Arvore", xlab="Volume", col="blue", horizontal = T)
#Retirando os outiliers
boxplot(a$Volume, main="Arvore", xlab="Volume", col="yellow", horizontal = T, outline = F)
#Gerando um entalhe
boxplot(a$Volume, main="Arvore", xlab="Volume", col="red", horizontal = T, outline = F, notch = T)
#Analisando os parametros
boxplot.stats(a$Height)
#Gerando os boxplot de todas as variaveis
boxplot(a)
#Gerando os boxplot de todas as variaveis
boxplot(a, horizontal = T)
InsectSprays
#Grafico de Setores
spray <- aggregate(. ~ spray, data = InsectSprays, sum)
spray
#Gerando um Grafico de Barras
barplot(spray$count, col = gray.colors(6), xlab = "Spray", ylab = "Total", names.arg = spray$spray)
box()
#Grafico de setores
pie(spray$count, labels = spray$spray, main = "Inseticidas Spray", col = c(1:6))
pie(spray$count, labels = NA, main = "Inseticidas Spray", col = c(1:6))
legend("bottomright", legend = spray$spray, cex = 1, fill = c(1:6))
legend("left", legend = spray$spray, cex = 1, fill = c(1:6))
pie(spray$count, labels = NA, main = "Inseticidas Spray", col = c(1:6))
legend("left", legend = spray$spray, cex = 1, fill = c(1:6))
pie(spray$count, labels = NA, main = "Inseticidas Spray", col = c(1:6))
legend("bottom", legend = spray$spray, cex = 1, fill = c(1:6))
pie(spray$count, labels = NA, main = "Inseticidas Spray", col = c(1:6))
legend("bottomleft", legend = spray$spray, cex = 1, fill = c(1:6))
#========================================================================================================
#   R   Ciencia de Dados
#   BoxPlot com o pacote lattice -> graficos interativos
#========================================================================================================
library(lattice)
b <- trees
#Gerando um boxplot
bwplot(b$Volume)
bwplot(b$Volume, main="Árvores", xlab = "Volume")
#Histogramas
histogram(b$Volume, main="Árvores", xlab = "Volume", aspect=2, type="count", nint=10)
chickwts
#Diagramas condicionais data = chickwts
aves <- chickwts
aggregate(aves$weight, by=list(aves$feed), FUN=sum)
histogram(~weight | feed, data = aves)
#Densidade
densityplot(~CO2$conc | CO2$Treatment)
#Gerando sem os pontos de dispersão
densityplot(~CO2$conc | CO2$Treatment, plot.points=F)
#GRafico de dispersão 2 variaveis
xyplot(CO2$conc ~ CO2$uptake | CO2$Type)
xyplot(CO2$conc ~ CO2$uptake | CO2$Treatment)
esoph
es <- esoph
dotplot(es$alcgp ~ es$ncontrols, data = es)
#Condicional
dotplot(es$alcgp ~ es$ncontrols | es$tobgp, data = es)
OrchardSprays
or <- OrchardSprays
cloud(decrease ~ rowpos * colpos, data = or)
#Pintando o grafico
cloud(decrease ~ rowpos * colpos,groups = treatment, data = or)
setwd("~/Projet1/Pre-Processamento")
setwd("~/Projet1/Pre-Processamento")
